# -*- python -*-
#
#  This file is part of the CNO software
#
#  Copyright (c) 2011-2012 - EBI
#
#  File author(s): Thomas Cokelaer <cokelaer@ebi.ac.uk>
#
#  Distributed under the GPLv2 License.
#  See accompanying file LICENSE.txt or copy at
#      http://www.gnu.org/licenses/gpl-2.0.html
#
#  CNO website: http://www.ebi.ac.uk/saezrodriguez/software.html
#
##############################################################################
# $Id: $

""" This is the CNO buildbot.

See documentation in ../doc
"""
import os
import access
import config
from buildbot.changes.svnpoller import SVNPoller
from os.path import join as pj
import extension

#import buildbot.steps.source, buildbot.process.buildstep


debug = False

c = BuildmasterConfig = {}

####### BUILDSLAVES

from config import python_version

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("cnor", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = access.slavePort

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.
c['change_source'] = []

c['change_source'].append(SVNPoller(
                    svnurl=access.svnCNOtrunk,
                    svnuser=access.svnUser,
                    svnpasswd=access.svnPassword,
                    pollinterval=60))

c['change_source'].append(SVNPoller(
                    svnurl=access.svnCNOMatlabtrunk,
                    svnuser=access.svnUser,
                    svnpasswd=access.svnPassword,
                    pollinterval=60))





####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []

# This scheduler allows to build all builders after a commit: does not work right now
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch="master"),
                            treeStableTimer=60,
                            builderNames = config.builderNames))

# This scheduler allows to build all builders every day
from buildbot.schedulers import timed
c['schedulers'].append(
    timed.Nightly(name='nightly',
        branch='master',
        builderNames=config.builderNames,
        hour=23,
        minute=0))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.
def format(msg):
    l = len(msg)
    if l>80:
        return msg
    else:
        return msg + "."*(80-l)

from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand, Compile
from buildbot.steps.transfer import DirectoryUpload

virtualpath = os.getenv("VIRTUAL_ENV")
rpackages_directory = pj(virtualpath, "slave/continuous_integration__CNOR_/RPackages")

try:
    os.mkdir(rpackages_directory)
except:
    pass


class Factories(object):
    def __init__(self, valid_names):
        self._factories = {} 
        self.valid_names = valid_names

    def __getitem__ (self, name) :
        return self._factories[name]

    def __setitem__ (self, name, factory) :
        assert name in self.valid_names, "%s not found in %s " % (name, self.valid_names)
        self._factories[name] = factory

factories = Factories(config.builders.keys())


env={
    'R_LIBS_SITE':pj(virtualpath, "slave/continuous_integration__CNOR_/RPackages"),
    'PYTHONPATH':pj(virtualpath,"lib/python/site-packages:/usr/lib64/%s/site-packages" % python_version),
    }


# CNOR builder
# ---------------------------------------------------------------------------------------
factory_cno = BuildFactory()
# remove all R packages fom the slave
factory_cno.addStep(
    ShellCommand(
        workdir='.', 
        command="rm -rf $VIRTUAL_ENV/slave/continuous_integration__CNOR_/RPackages/CellNOptR $VIRTUAL_ENV/slave/continuous_integration__CNOR_/CNOR.CFL $VIRTUAL_ENV/slave/continuous_integration__CNOR_CNORode",
        description="removing CNOR packages from the install \ndirectory (in slave/RPackages)", 
        env=env)
    )

# install dependencies
factory_cno.addStep(ShellCommand(workdir='.', command="pwd; R --no-save --no-restore < ../../master/install_R_packages.R", 
    description="Installing dependencies (in slave/RPackages)", 
    env=env))

# check out the CNOR source
factory_cno.addStep(extension.SVN(svnurl='https://svn.ebi.ac.uk/sysbiomed/trunk/CellNOptR',mode='update',
    username=access.svnUser, password=access.svnPassword,
    workdir="CellNOptR_svn",
    description="Checking out CellNOptR package"
    ))

# install CNOR
#destination = "cokelaer@ebi-002.ebi.ac.uk:/nfs/research2/saezrodriguez/cno/"
# check does not use the -l option, so we must set the R_LIBS_SITE env variable

    #factory_cno.addStep(ShellCommand(workdir='.', command="scp CellNOptR_svn/inst/doc/CellNOptR-vignette.pdf %s/documents/" % destination, 
    #    description=format("CNOR package: copying vignettes"), env=env))

factory_cno.addStep(extension.SVN(svnurl='https://svn.ebi.ac.uk/sysbiomed/trunk/essR/MEIGOR',mode='update',
   username=access.svnUser, password=access.svnPassword, 
    workdir="MEIGOR",
    description="Checking out MEIGOR"))

factory_cno.addStep(ShellCommand(workdir='.', command="R CMD INSTALL -l RPackages MEIGOR",
    description="Installing MEIGOR package (needed by CNOR ode)", env=env))

factory_cno.addStep(ShellCommand(workdir='.', command="cnolab_distribute --package MEIGOR --revision HEAD",
            description="Building MEIGOR tar ball (cnolab_distribute)", env=env))

# do not scp MEIGO tar ball tough excpt on request by Jose EGEA




Rpackages = config.CellNOptR_packages

for package in ['CellNOptR', 'CNORode', 'CNORdt', 'CNORfuzzy']:
    package_dir = Rpackages[package]['dir']
    factory_cno.addStep(
        extension.SVN(
            svnurl="https://svn.ebi.ac.uk/sysbiomed/trunk/%s" % package_dir,
            mode='update',
            username=access.svnUser, 
            password=access.svnPassword,
            workdir=package_dir,
            description="Checking out %s" % package)
    )

    # here we must tell where to install the libs hence the -l Rpackages
    factory_cno.addStep(
        ShellCommand(
            workdir='.', 
            command="R CMD INSTALL -l RPackages %s" % package_dir, 
            description="Installing %s package" % package, 
            env=env)
    )

    # check does not use the -l option, so we must set the R_LIBS_SITE env variable
    factory_cno.addStep(
        ShellCommand(
            workdir='.', 
            command="R CMD check %s" % package_dir,
            description="Checking %s package" % package,
            env=env)
    )

    factory_cno.addStep(    
        ShellCommand(
            workdir='.', 
            command="cellnopt_distribute --package %s --revision HEAD" % (package),
            description="Building %s tar ball with cellnopt_distribute" % package, 
            env=env)
    )

    #factory_cno.addStep(
    #    ShellCommand(
    #        workdir='.', 
    #        command="R CMD check %s --no-vignettes" % package_dir,
    #        description="Checking %s package (no-vignettes)"%package, 
    #        env=env)
    #)

## commands common to all packages. 
# scp tar ball on the serrver
factory_cno.addStep(
    ShellCommand(
        workdir='.', 
        command="scp *tar.gz %s@ebi-001.ebi.ac.uk:%s/downloads" %(access.svnUser, config.cnopath),
        description="copying tar ball on www.cellnopt.org/downloads", 
        env=env)
)


command="""ssh -X %s@ebi-001.ebi.ac.uk "cd %s ; svn up; python builder.py downloads; svn commit -m 'daily update '"   """ %(access.svnUser, config.cnopath)
factory_cno.addStep(
    ShellCommand(
        workdir='.',
        command=command,
        description="Updating cellnopt.org (update and commit download page).", 
        env=env)
)

### cleanup the tar.gz files
factory_cno.addStep(
    ShellCommand(
        workdir='.', 
        command="rm -rf *tar.gz",
        description="Cleaning up (removing tar ball)", 
        env=env)
)




factories['cnor'] = factory_cno


# cellnopt builder
# --------------------------------------------------------------------------------------

factory_cellnopt = BuildFactory()
factory_cellnopt.addStep(extension.SVN(svnurl="https://svn.ebi.ac.uk/sysbiomed/trunk/cnolab/cellnopt",mode='update',
    username=access.svnUser, password=access.svnPassword, workdir="cellnopt",
    description="Updating cellnopt"))

for package in config.cellnopt_packages:
    # cleanup 
    factory_cellnopt.addStep(ShellCommand(workdir=pj('cellnopt', package), command="python setup.py clean",
        description="Cleaning up cellnopt.%s package" % package,  env=env,  ))
    # install
    factory_cellnopt.addStep(ShellCommand(workdir=pj('cellnopt', package), command="python setup.py install sdist",
        description="Installing cellnopt.%s package" % package,  env=env ))
    # running the test
    factory_cellnopt.addStep(ShellCommand(workdir=pj('cellnopt', package), command="python setup.py nosetests ",
        description="Running the test suite of cellnopt.%s" % package,  env=env))

from buildbot.steps.python import Sphinx
for package in config.cellnopt_packages:
    factory_cellnopt.addStep(ShellCommand(workdir=pj('cellnopt', package, 'doc'),
        command="make clean; make html;",
        description="Building Sphinx documentation (%s)" % package,  env=env))

    # uploading the cellnopt.data doc.
    if package=='data':
        factory_cellnopt.addStep(ShellCommand(
            command='find . -type f -name "*" | xargs chmod 644',
            workdir=pj('cellnopt', "data", 'doc', 'build', 'html'),
            description="Changing permission cellnopt.data before uploading",
            env=env, haltOnFailure=True
            ))

        factory_cellnopt.addStep(ShellCommand(
            command="scp -r build/html/* cokelaer@ebi-001.ebi.ac.uk:/homes/cokelaer/public_html/cellnopt/data",
            workdir=pj('cellnopt', "data", 'doc'),
            description="Uploading cellnopt.data documentation to the web",
            env=env
            ))

factories['cellnopt'] = factory_cellnopt
# Cellnopt builder ---------------------------------------------------- end



# third parties   ---------------------------------------------------- start
factory_third_parties = extension.PythonFactory(access=access, env=env)

factory_third_parties.name = "easydev"
factory_third_parties.svn = access.easydev_svn
factory_third_parties.addStep_svn(workdir="easydev", mode="update")
factory_third_parties.addStep_install(workdir=pj("easydev", "trunk"))
factory_third_parties.addStep_nosetests(workdir=pj("easydev", "trunk"))

factory_third_parties.name = "rtools"
factory_third_parties.svn = access.rtools_svn
factory_third_parties.addStep_svn(workdir="rtools", mode="update")
factory_third_parties.addStep_install(workdir=pj("rtools", "trunk"))
factory_third_parties.addStep_nosetests(workdir=pj("rtools", "trunk"))

factory_third_parties.name = "pymeigo"
factory_third_parties.svn = access.pymeigo_svn
factory_third_parties.addStep_svn(workdir="pymeigo", mode="update")
factory_third_parties.addStep_install(workdir=pj("pymeigo"))
factory_third_parties.addStep_nosetests(workdir=pj("pymeigo"))

factories['third_parties'] = factory_third_parties

# CNOLAB builder ---------------------------------------------------- start
factory_cnolab = BuildFactory()
# checkout SVN
factory_cnolab.addStep(extension.SVN(svnurl="https://svn.ebi.ac.uk/sysbiomed/trunk/cnolab",mode='update',
    username=access.svnUser, password=access.svnPassword, workdir="cnolab", description="Updating cnolab"))

for package in config.cnolab_packages:
    # cleanup 
    factory_cnolab.addStep(ShellCommand(workdir=pj('cnolab', package), command="python setup.py clean",
        description="Cleaning up cnolab.%s package" % package,  env=env,  ))
    # install
    factory_cnolab.addStep(ShellCommand(workdir=pj('cnolab', package), command="python setup.py install sdist",
        description="Installing cnolab.%s package" % package,  env=env ))
    # running the test
    factory_cnolab.addStep(ShellCommand(workdir=pj('cnolab', package), command="python setup.py nosetests ",
        description="Running the test suite of cnolab.%s" % package,  env=env))

from buildbot.steps.python import Sphinx
for package in config.cnolab_packages:
    factory_cnolab.addStep(ShellCommand(workdir=pj('cnolab', package, 'doc'),
        command="make clean; make html;",
        description="Building Sphinx documentation (%s)" % package,  env=env))


factories['cnolab'] = factory_cnolab
# CNOLAB builder
# -------------------------------------------------------------------- end


# CNO matlab 
try:
    os.mkdir('public_html/matlab')
except:
    pass

factory_cno_matlab = BuildFactory()
factory_cno_matlab.addStep(extension.SVN(svnurl=access.svnCNOMatlabtrunk,mode='update',
    username=access.svnUser, password=access.svnPassword, 
    workdir="CNOmatlab"))
factory_cno_matlab.addStep(ShellCommand(workdir='CNOmatlab/tests',
    command="python runtest.py",
    description="Running matlab test suite (runtest.py"))
factory_cno_matlab.addStep(ShellCommand(workdir='CNOmatlab/tests',
    command="pwd; cp *.log summary.html ../../../../master/public_html/matlab",
    description="Copying summary HTML page in public_html/matlab"))


factories['cnomatlab']  = factory_cno_matlab




########### BUILDERS
from buildbot.config import BuilderConfig
c['builders'] = []

for key in config.keys:
    if config.builders[key]:
        print "----------------- Adding " + key + "  " + config.builders[key]
        c['builders'].append(
            BuilderConfig(
                name=config.builders[key],
                slavenames=["cnor"],
                factory=factories[key]))
    else:
        print "----------------- Skipping " + key + "  "



####### STATUS TARGETS and AUTHENTIFICATION 
from buildbot.status.web.authz import Authz
from buildbot.status.html import WebStatus

authz = Authz(auth=extension.HashAuth(access.auth_users),
    forceBuild='auth', # only authenticated users
    pingBuilder=True, # but anyone can do this
)
c['status'] = []
c['status'].append(WebStatus(http_port=8010, authz=authz))
# public_html can be used to specify another public_html directory. However, it is
# only used to store new html and css, not to be able to point to another url.


####### PROJECT IDENTITY

c['title'] = config.title
c['titleURL'] = config.titleURL
c['buildbotURL'] = config.buildbotURL

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

